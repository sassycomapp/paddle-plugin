name: Test and Validate

on: [push, pull_request]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linting
        run: npm run lint

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: auto
          generateSarif: true
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [lint, security]
    strategy:
      matrix:
        node-version: [16, 18, 20]
        os: [ubuntu-latest, windows-latest]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      - name: Generate test report
        run: npm run report
        if: always()
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            reports/
            coverage/
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage/lcov.info

  podman-test:
    name: Podman Container Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Podman
        run: |
          sudo apt update
          sudo apt install -y podman podman-compose
      - name: Build containers
        run: podman-compose build
      - name: Start services
        run: podman-compose up -d
      - name: Wait for services
        run: sleep 30
      - name: Run container tests
        run: podman-compose run test-runner npm test
      - name: Stop services
        run: podman-compose down
      - name: Upload container logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-logs
          path: podman-compose.log

  mcp-test:
    name: MCP Server Test
    runs-on: ubuntu-latest
    needs: [test]
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Start MCP server
        run: npm start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      - name: Wait for server
        run: sleep 10
      - name: Test MCP server
        run: npm run test:mcp
      - name: Stop MCP server
        run: pkill -f "node.*mcp"

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Install k6
        run: |
          wget https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-windows-amd64.zip
          unzip k6-v0.47.0-windows-amd64.zip
          sudo mv k6-v0.47.0-windows-amd64/k6 /usr/local/bin/
      - name: Run performance tests
        run: k6 run load-test.js
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: performance-report.json

  report-generation:
    name: Generate Final Report
    runs-on: ubuntu-latest
    needs: [lint, security, test, podman-test, mcp-test, performance-test]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Generate consolidated report
        run: npm run report:generate
      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-report
          path: reports/
content>
</write_to_file>
