[tool:pytest]
# Test configuration for Everything Search MCP Server

# Add source directories to Python path
python_paths = src

# Test discovery
testpaths = unit integration performance
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output formatting
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --color=yes

# Custom markers
markers =
    unit: Unit tests for core functionality
    integration: Integration tests for MCP protocol
    performance: Performance tests for search operations
    slow: Slow running tests
    fast: Fast running tests
    smoke: Basic smoke tests
    regression: Regression tests

# Test coverage
# These options are used when running with --cov
# Example: pytest --cov=src --cov-report=html --cov-report=term-missing

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */venv/*
    */env/*
    */__pycache__/*
    */.git/*
    */build/*
    */dist/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:

[coverage:html]
directory = htmlcov
title = Everything Search MCP Server Coverage Report

[coverage:xml]
output = coverage.xml

# Asyncio configuration
[pytest-asyncio]
asyncio_mode = auto
testpaths = unit integration performance

# Logging configuration
[loggers]
keys = root,pytest,search_mcp

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console

[logger_pytest]
level = WARNING
handlers = console
qualname = pytest
propagate = 0

[logger_search_mcp]
level = DEBUG
handlers = console
qualname = search_mcp
propagate = 0

[handler_console]
class = StreamHandler
level = NOTSET
formatter = generic
args = (sys.stderr,)
args = (sys.stdout,)

[formatter_generic]
format = %(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt = %Y-%m-%d %H:%M:%S