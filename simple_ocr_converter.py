#!/usr/bin/env python3
"""
Simple PNG to Markdown converter using EasyOCR
"""

import os
import sys
import time
from pathlib import Path

# Add user site-packages to path
user_site = os.path.join(os.path.expanduser('~'), 'AppData', 'Roaming', 'Python', 'Python313', 'site-packages')
sys.path.insert(0, user_site)

try:
    import easyocr
    from PIL import Image
    import numpy as np
    import io
except ImportError as e:
    print(f"Error importing required modules: {e}")
    print("Please install required packages: pip install --user easyocr pillow numpy")
    sys.exit(1)

# Set up UTF-8 output
import sys
if sys.platform == "win32":
    sys.stdout.reconfigure(encoding='utf-8')

def convert_image_to_markdown(image_path: str, output_path: str = None) -> str:
    """
    Convert image to markdown format using EasyOCR.
    
    Args:
        image_path: Path to the input image
        output_path: Path to save the markdown file (optional)
    
    Returns:
        str: Extracted text in markdown format
    """
    try:
        print(f"Starting conversion of {image_path}")
        
        # Initialize EasyOCR reader with suppressed output
        print("Initializing EasyOCR reader...")
        import contextlib
        import io
        
        # Suppress EasyOCR output
        with contextlib.redirect_stdout(io.StringIO()):
            reader = easyocr.Reader(['en'])  # English only
        
        # Load and process image
        print("Loading image...")
        image = Image.open(image_path)
        image_array = np.array(image)
        
        # Extract text
        print("Extracting text...")
        start_time = time.time()
        with contextlib.redirect_stdout(io.StringIO()):
            results = reader.readtext(image_array)
        processing_time = time.time() - start_time
        
        # Format results
        extracted_text = []
        total_words = 0
        total_lines = 0
        confidence_scores = []
        
        for (bbox, text, confidence) in results:
            if text.strip():  # Only process non-empty text
                extracted_text.append(text)
                confidence_scores.append(confidence)
                total_words += len(text.split())
                total_lines += 1
        
        # Calculate statistics
        avg_confidence = sum(confidence_scores) / len(confidence_scores) if confidence_scores else 0
        high_confidence_words = sum(1 for conf in confidence_scores if conf >= 0.5)
        low_confidence_words = len(confidence_scores) - high_confidence_words
        
        # Create markdown content
        markdown_content = f"""# OCR Results

## Source Image
- **File**: {os.path.basename(image_path)}
- **Path**: {image_path}
- **Processing Time**: {processing_time:.2f} seconds
- **Timestamp**: {time.strftime('%Y-%m-%d %H:%M:%S')}

## Extracted Text

{' '.join(extracted_text)}

## Processing Statistics

- **Total Words**: {total_words}
- **Total Lines**: {total_lines}
- **Average Confidence**: {avg_confidence:.2f}
- **High Confidence Words**: {high_confidence_words}
- **Low Confidence Words**: {low_confidence_words}

## Image Metadata

- **Image Size**: {image.size}
- **Image Mode**: {image.mode}

---
*Generated by EasyOCR Converter*
"""
        
        # Save to file if output path is provided
        if output_path:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            print(f"Markdown file saved to {output_path}")
        
        return markdown_content
        
    except Exception as e:
        print(f"Conversion failed: {e}")
        return f"Error: {str(e)}"

def main():
    """Main function to convert the specified PNG file."""
    # Source file path
    source_file = r"C:\_1mybizz\paddle-plugin\Docs\_My Todo\A.0 Mybizz system.png"
    
    # Check if source file exists
    if not os.path.exists(source_file):
        print(f"Error: Source file not found: {source_file}")
        return
    
    # Generate output path
    output_dir = os.path.dirname(source_file)
    output_file = os.path.join(output_dir, "A.0 Mybizz system.md")
    
    print(f"Converting {source_file} to markdown...")
    print(f"Output will be saved to: {output_file}")
    
    # Perform conversion
    result = convert_image_to_markdown(source_file, output_file)
    
    if result.startswith("Error:"):
        print(f"Conversion failed: {result}")
    else:
        print("Conversion completed successfully!")
        print(f"Markdown file saved to: {output_file}")
        
        # Show first few lines of result
        lines = result.split('\n')
        print("\nFirst few lines of converted content:")
        print('-' * 50)
        for line in lines[:10]:
            print(line)
        print('-' * 50)

if __name__ == "__main__":
    main()