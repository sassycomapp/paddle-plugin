#!/usr/bin/env python3
"""
Simple script to convert PNG to Markdown using EasyOCR
"""

import os
import sys
import json
import logging
from pathlib import Path
from PIL import Image
import numpy as np

# Add the easyocr-mcp src directory to Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'mcp_servers', 'easyocr-mcp', 'src'))

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_config():
    """Create a basic configuration for EasyOCR processor."""
    return {
        'easyocr': {
            'languages': ['en'],
            'gpu': False,
            'model_storage_directory': 'C:/easyocr_models',
            'confidence_threshold': 30
        },
        'preprocessing': {
            'max_image_size': 1024,
            'use_grayscale': True,
            'use_binarization': True
        },
        'batch': {
            'size': 1,
            'timeout': 30
        }
    }

def convert_image_to_markdown(image_path: str, output_path: str = None) -> str:
    """
    Convert image to markdown format using EasyOCR.
    
    Args:
        image_path: Path to the input image
        output_path: Path to save the markdown file (optional)
    
    Returns:
        str: Extracted text in markdown format
    """
    try:
        # Import EasyOCR processor
        from easyocr_processor import EasyOCRProcessor
        
        logger.info(f"Starting conversion of {image_path}")
        
        # Create processor with test configuration
        config = create_test_config()
        processor = EasyOCRProcessor(config)
        
        # Validate installation
        if not processor.validate_installation():
            logger.error("EasyOCR installation validation failed")
            return "Error: EasyOCR installation validation failed"
        
        # Extract text with metadata
        result = processor.extract_text_with_metadata(image_path)
        
        # Format as markdown
        markdown_content = f"""# OCR Results

## Source Image
- **File**: {os.path.basename(image_path)}
- **Path**: {image_path}
- **Processing Time**: {result.get('processing_time', 0):.2f} seconds
- **Timestamp**: {result.get('timestamp', 'Unknown')}

## Extracted Text

{result.get('text', 'No text found')}

## Processing Statistics

- **Total Words**: {result.get('statistics', {}).get('total_words', 0)}
- **Total Lines**: {result.get('statistics', {}).get('total_lines', 0)}
- **Average Confidence**: {result.get('statistics', {}).get('average_confidence', 0):.2f}
- **High Confidence Words**: {result.get('statistics', {}).get('high_confidence_words', 0)}
- **Low Confidence Words**: {result.get('statistics', {}).get('low_confidence_words', 0)}

## Image Metadata

- **Image Size**: {result.get('metadata', {}).get('image_size', 'Unknown')}
- **Image Mode**: {result.get('metadata', {}).get('image_mode', 'Unknown')}

## Configuration Used

- **Languages**: {', '.join(result.get('metadata', {}).get('easyocr_config', {}).get('languages', []))}
- **GPU Enabled**: {result.get('metadata', {}).get('easyocr_config', {}).get('gpu', False)}
- **Confidence Threshold**: {result.get('metadata', {}).get('easyocr_config', {}).get('confidence_threshold', 0)}

---
*Generated by EasyOCR MCP Server*
"""
        
        # Save to file if output path is provided
        if output_path:
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            logger.info(f"Markdown file saved to {output_path}")
        
        return markdown_content
        
    except Exception as e:
        logger.error(f"Conversion failed: {e}")
        return f"Error: {str(e)}"

def main():
    """Main function to convert the specified PNG file."""
    # Source file path
    source_file = r"C:\_1mybizz\paddle-plugin\Docs\_My Todo\A.0 Mybizz system.png"
    
    # Check if source file exists
    if not os.path.exists(source_file):
        print(f"Error: Source file not found: {source_file}")
        return
    
    # Generate output path
    output_dir = os.path.dirname(source_file)
    output_file = os.path.join(output_dir, "A.0 Mybizz system.md")
    
    print(f"Converting {source_file} to markdown...")
    print(f"Output will be saved to: {output_file}")
    
    # Perform conversion
    result = convert_image_to_markdown(source_file, output_file)
    
    if result.startswith("Error:"):
        print(f"Conversion failed: {result}")
    else:
        print("Conversion completed successfully!")
        print(f"Markdown file saved to: {output_file}")
        
        # Show first few lines of result
        lines = result.split('\n')
        print("\nFirst few lines of converted content:")
        print('-' * 50)
        for line in lines[:10]:
            print(line)
        print('-' * 50)

if __name__ == "__main__":
    main()